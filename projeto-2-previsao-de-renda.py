# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DhScSJR6esvn21eaf26FV8F9afQ0nBAy

# Previsão de renda

### Etapa 1 CRISP - DM: Entendimento do negócio

Uma instituição financeira quer entender os fatores que influenciam a renda dos clientes para melhorar a segmentação de produtos e identificar novas oportunidades de negócio.



Objetivo: Criar um modelo que ajude a instituição a prever a renda dos clientes com base em seus dados demográficos e comportamentais.

## Etapa 2 Crisp-DM: Entendimento dos dados

## Dicionário de Dados
| Variável                | Descrição                          | Tipo         |
| ----------------------- |:---------------------------------------------------:| ------------:|
| data_ref                |  Data de referência dos dados                                   | Data (object)|
| id_cliente              |  Identificação única do cliente                                 | Numérica|
| sexo                    |  Sexo do cliente (F = Feminino, M = Masculino)                          | Categórica|
| posse_de_veiculo        |  Cliente possui veículo (True = Sim, False = Não)                       | Booleana|
| posse_de_imovel         |  Cliente possui imóvel (True = Sim, False = Não)                       | Booleana|
| qtd_filhos              |  Quantidade de filhos do cliente                                 | Numérica|
| tipo_renda              |  Tipo de fonte de renda do cliente                                 | Categórica|
| educacao                |  Nível de educação do cliente                                 | Categórica|
| estado_civil            |  Estado civil do cliente                                 | Categórica|
| tipo_residencia         |  Tipo de residência do cliente                                 | Categórica|
| idade                   |  Idade do cliente em anos                                    | Numérica|
| tempo_emprego           |  Tempo de emprego em anos                                    | Numérica|
| qt_pessoas_residencia   |  Quantidade de pessoas na residência do cliente                   | Numérica|
| renda                   |  Renda mensal do cliente em reais                                   | Numérica|
"""

!pip install ydata-profiling


import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from ydata_profiling import ProfileReport
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np
import streamlit as st

renda = pd.read_csv('previsao_de_renda.csv')
renda.head(), renda.info()

"""#### Entendimento dos dados - Univariada e Bivariada"""

# Gerar o relatório
report = ProfileReport(renda, title="Relatório de Análise Exploratória", explorative=True)

# Exibir no Jupyter Notebook ou salvar como HTML
report.to_file("relatorio_analise_exploratoria.html")  # Salva em arquivo
report  # Abre no notebook

"""## Etapa 3 Crisp-DM: Preparação dos dados"""

# Seleção: Removendo colunas irrelevantes
renda = renda.drop(columns=['id_cliente'])

# Limpeza: Tratando dados ausentes em 'tempo_emprego'
renda['tempo_emprego'].fillna(renda['tempo_emprego'].median(), inplace=True)

# Verificando se todos os valores ausentes foram tratados
print(renda.isnull().sum())

# Construção: Criando novas variáveis
# Faixa Etária
bins = [0, 25, 40, 60, 100]
labels = ['Jovem', 'Adulto', 'Meia Idade', 'Idoso']
renda['faixa_etaria'] = pd.cut(renda['idade'], bins=bins, labels=labels, right=False)

# Renda por Pessoa
renda['renda_por_pessoa'] = renda['renda'] / renda['qt_pessoas_residencia']

# Formatação: Convertendo variáveis categóricas para 'category'
categorical_cols = ['sexo', 'tipo_renda', 'educacao', 'estado_civil', 'tipo_residencia', 'faixa_etaria']
renda[categorical_cols] = renda[categorical_cols].astype('category')

# Verificando os tipos atualizados
print(renda.dtypes)

"""## Etapa 4 Crisp-DM: Modelagem"""

# 1. Preparando os dados para modelagem
X = renda.drop(columns=['renda'])
y = renda['renda']

# Codificando variáveis categóricas para numéricas
X = pd.get_dummies(X, drop_first=True)

# Dividindo os dados em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 2. Modelos e Avaliação

# Regressão Linear
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
y_pred_lr = lr_model.predict(X_test)

# Random Forest Regressor
rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

# Métricas
metrics = {
    'Modelo': ['Regressão Linear', 'Random Forest'],
    'MAE': [
        mean_absolute_error(y_test, y_pred_lr),
        mean_absolute_error(y_test, y_pred_rf),
    ],
    'RMSE': [
        np.sqrt(mean_squared_error(y_test, y_pred_lr)),
        np.sqrt(mean_squared_error(y_test, y_pred_rf)),
    ],
    'R²': [
        r2_score(y_test, y_pred_lr),
        r2_score(y_test, y_pred_rf),
    ],
}

# DataFrame para visualização
metrics_df = pd.DataFrame(metrics)

# Visualizando Métricas
plt.figure(figsize=(10, 6))
sns.barplot(x='Modelo', y='MAE', data=metrics_df, palette='Blues_d')
plt.title('Erro Médio Absoluto (MAE)')
plt.ylabel('MAE')
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x='Modelo', y='RMSE', data=metrics_df, palette='Greens_d')
plt.title('Raiz do Erro Quadrático Médio (RMSE)')
plt.ylabel('RMSE')
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x='Modelo', y='R²', data=metrics_df, palette='Oranges_d')
plt.title('Coeficiente de Determinação (R²)')
plt.ylabel('R²')
plt.ylim(0, 1)
plt.show()

# 3. Comparação das Previsões
plt.figure(figsize=(12, 6))
plt.scatter(y_test, y_pred_lr, alpha=0.6, label='Regressão Linear', color='blue')
plt.scatter(y_test, y_pred_rf, alpha=0.6, label='Random Forest', color='green')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')  # Linha ideal
plt.title('Comparação entre Previsões e Valores Reais')
plt.xlabel('Valor Real')
plt.ylabel('Previsão')
plt.legend()
plt.show()

"""## Etapa 5 Crisp-DM: Avaliação dos resultados"""

# Exibindo as métricas em uma tabela
print("Métricas dos Modelos:")
print(metrics_df)

# Seleção do melhor modelo
melhor_modelo = metrics_df.loc[metrics_df['R²'].idxmax(), 'Modelo']
print(f"\nMelhor modelo com base no R²: {melhor_modelo}")

"""## Etapa 6 Crisp-DM: Implantação"""

# Carregando os dados e treinar o modelo (esta parte seria feita antes)
renda = pd.read_csv('previsao_de_renda.csv')  # Seu dataset
X = renda.drop(columns=['renda'])
y = renda['renda']
X = pd.get_dummies(X, drop_first=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)

# Configurando o Streamlit
st.title("Previsão de Renda")
st.write("Preencha as informações abaixo para prever a renda de um cliente.")

# Campos do formulário
sexo = st.selectbox("Sexo", ["Feminino", "Masculino"])
idade = st.slider("Idade", 18, 100, 30)
educacao = st.selectbox("Nível de Educação", ["Ensino Médio", "Superior Completo", "Pós-graduação"])
estado_civil = st.selectbox("Estado Civil", ["Solteiro", "Casado", "Separado", "Viúvo"])
tipo_renda = st.selectbox("Tipo de Renda", ["Assalariado", "Empresário", "Pensionista", "Servidor Público"])
posse_de_veiculo = st.checkbox("Possui Veículo?")
posse_de_imovel = st.checkbox("Possui Imóvel?")
tempo_emprego = st.slider("Tempo de Emprego (anos)", 0, 40, 5)
qt_pessoas_residencia = st.slider("Quantidade de Pessoas na Residência", 1, 10, 2)

# Processando os dados do usuário
input_data = {
    'sexo': [sexo],
    'idade': [idade],
    'educacao': [educacao],
    'estado_civil': [estado_civil],
    'tipo_renda': [tipo_renda],
    'posse_de_veiculo': [posse_de_veiculo],
    'posse_de_imovel': [posse_de_imovel],
    'tempo_emprego': [tempo_emprego],
    'qt_pessoas_residencia': [qt_pessoas_residencia]
}
input_df = pd.DataFrame(input_data)

# Garantindo compatibilidade com o modelo
input_df = pd.get_dummies(input_df, drop_first=True)
input_df = input_df.reindex(columns=X.columns, fill_value=0)

# Prevendo a renda
if st.button("Prever Renda"):
    previsao = rf_model.predict(input_df)
    st.success(f"A renda prevista para o cliente é R$ {previsao[0]:,.2f}")
